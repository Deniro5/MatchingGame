{"version":3,"sources":["components/Home.js","components/Card.js","components/ImgArray.js","components/Board.js","components/App.js","index.js"],"names":["Home","props","react_default","a","createElement","className","style","fontWeight","fontSize","marginBottom","react_router_dom","to","id","Card","onClick","click","bind","showImage","class","alt","src","imgsrc","imageArray","Board","match","_useState","useState","_useState2","Object","slicedToArray","board","setBoard","_useState3","_useState4","first","setFirst","_useState5","_useState6","disabled","setDisabled","_useState7","_useState8","time","setTime","_useState9","_useState10","pairs","setPairs","_useState11","_useState12","timer","setTimer","_useState13","_useState14","completed","setCompleted","_useState15","_useState16","home","setHome","_useState17","_useState18","items","setItems","diff","useParams","useEffect","newBoard","imageArray1","toConsumableArray","i","randIndex","Math","floor","random","push","flipped","splice","arr","shuffledBoard","len","length","shuffleArray","clearTimeout","alert","finishedBoard","countdown","setTimeout","cardClick","index","resetBoard","components_Home","map","item","components_Card","textDecoration","history","createHistory","App","react_router","exact","path","component","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.5a08d630.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = props => {\n    \n    return (\n      <div className = \"homeContainer\">\n        <div className = \"buttonContainer\">\n          <h1 className = \"title\"> Matching Game </h1>\n          <p style = {{fontWeight: \"bold\", fontSize: \"24px\", marginBottom: \"15px\"}}> Instructions: </p>  \n          <p> Find all matching pairs before the timer runs out! Select a difficulty below to start. </p>\n          <Link to = \"/easy\">\n            <button id = \"easyBtn\"> Easy </button>\n          </Link>\n          <Link to = \"/medium\">\n            <button id = \"mediumBtn\"> Medium </button>\n          </Link>\n          <Link to = \"/hard\">\n            <button id = \"hardBtn\"> Hard </button>\n          </Link>\n        </div> \n      </div>\n    );\n  }\n\nexport default Home;\n","import React from 'react';\n\nconst Card = props => {\n\n    return (\n      <div onClick = {props.click.bind(this)} className={\"flip-card \" + (props.showImage ? \"rotate\" : \"\") }>\n      <div className={\"flip-card-inner \" + (props.showImage ? \"rotate\" : \"\") }>\n        <div class=\"flip-card-front\">\n          <h1> ? </h1>\n        </div>\n        <div class=\"flip-card-back\">\n          <img alt = \"\" src= {props.imgsrc}/>\n        </div>\n      </div>\n    </div>\n    \n    \n    );\n  }\n\n\nexport default Card;\n","const imageArray = [\n    \"imgs/sun.png\",\n    \"imgs/bird.png\",\n    \"imgs/volcano.png\",\n    \"imgs/cactus.png\",\n    \"imgs/ball.png\",\n    \"imgs/flower.png\",\n    \"imgs/car.png\",\n    \"imgs/key.png\",\n    \"imgs/snake.png\",\n    \"imgs/cloud.png\",\n]\n\nexport default imageArray;","import React, {useState, useEffect } from 'react';\nimport Card from './Card';\nimport Home from './Home';\nimport imageArray from './ImgArray'\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\n\n\nconst Board = (props, match) => {\n\n  const [board, setBoard] = useState([]);\n  const [first, setFirst] = useState(-1);\n  const [disabled, setDisabled] = useState(false);\n  const [time, setTime] = useState(60);\n  const [pairs, setPairs] = useState(0);\n  const [timer, setTimer] = useState();\n  const [completed, setCompleted] = useState(false);\n  const [home, setHome] = useState(false);\n  const [items, setItems] = useState(8);\n  const { diff } = useParams();\n\n  useEffect(() => {\n    let newBoard = [];\n    let imageArray1 = [...imageArray];\n    let items;\n    if (diff === \"hard\") {\n       items = 16\n    }\n    else if (diff === \"medium\") {\n      items = 12\n    }\n    else {\n       items = 8\n    }\n    for (let i = 0; i < (items/2) ; i ++) {\n      let randIndex = Math.floor(Math.random() * (10 - i));  // generate random index  (WE DONT NEED TO RANDOMIZE TWICE)\n      newBoard.push({flipped: false, imgsrc : imageArray1[randIndex]});\n      newBoard.push({flipped: false, imgsrc : imageArray1[randIndex]}); //for now jus put the pairs beside each other\n      imageArray1.splice(randIndex, 1);\n    } \n    const shuffleArray = (arr) => {\n      let shuffledBoard =  [];\n      for (let len = arr.length - 1; len >= 0 ; len--) {\n        let randIndex = Math.floor(Math.random() * (len));\n        shuffledBoard.push(arr[randIndex]);\n        arr.splice(randIndex,1)\n      }\n      return shuffledBoard\n    } \n    setBoard(shuffleArray(newBoard))\n    setItems(items); \n  }, [])\n\n\n\n\n  useEffect(() => {\n    if (time === 0) {  //If the time expires\n      clearTimeout(timer);\n      alert(\"You lost. Try again!\");\n      let finishedBoard = [...board];\n      for (let i = 0; i < finishedBoard.length; i++) {\n        finishedBoard[i].flipped = true;\n      }\n      setBoard(finishedBoard)\n      setCompleted(true);\n    }\n\n    else if (pairs < items/2) { //if they haven't got all pairs yet and time hasn't expired\n      const countdown = setTimeout(() => {   \n        setTime(time - 1)\n      }, 1000)\n      setTimer(countdown)\n    }\n\n  }, [time])\n\n\n\n  useEffect(() => {\n    if  (pairs === items/2) { //if they have unveiled all pairs\n      alert(\"Congratulations. You Win!\");\n      clearTimeout(timer);\n      setCompleted(true);\n    }\n  }, [pairs])\n  \n\n  const cardClick = (index) => {\n    if (!disabled && !completed && !board[index].flipped) {\n      let newBoard = [...board];\n      newBoard[index].flipped = true;\n      if (first < 0 ) {\n        setFirst(index)\n        setBoard(newBoard)\n      }\n      else {\n        if (newBoard[first].imgsrc === newBoard[index].imgsrc) {\n            setBoard(newBoard)\n            setFirst(-1);\n            setPairs(pairs + 1)\n        }\n        else {\n          setFirst(-1);\n          setBoard(newBoard)\n          setDisabled(true)\n          setTimeout(() => {\n            let resetBoard = [...newBoard]\n            resetBoard[first].flipped = false;\n            resetBoard[index].flipped = false;\n            setBoard(resetBoard)\n            setDisabled(false)\n          },1000)\n        }\n      }\n    }\n  }\n\n  if (home) {\n    return (\n      <Home/>\n    )\n  }\n\n    return (\n      <div className = \"boardContainer\">\n        <h2 className = \"timer\">Time Remaining: {time} seconds</h2>\n        {board.map((item,index) => (\n          <Card imgsrc = {item.imgsrc} click = {cardClick.bind(this,index)} showImage = {item.flipped}/>\n        ))}\n        {completed && \n        <Link to = \"/\" style = {{textDecoration: \"none\"}}>\n          <button className = \"homeBtn\" onClick = {() => {setHome(true)}}> Back to Menu </button>\n        </Link>}\n      </div>\n    );\n  }\n\n\nexport default Board;\n","import React, { Component } from 'react';\nimport {HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport createHistory from 'history/createBrowserHistory';\nimport '../scss/app.scss';\nimport Home from './Home';\nimport Board from './Board';\n\n\nconst history = createHistory();\n\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router history={history}>\n      <div className=\"app-container\">\n        <Switch>\n          <Route exact path=\"/\" component = {Home}/>\n          <Route exact path=\"/:diff\" component = {Board}/>\n          />\n        </Switch>\n      </div>  \n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}